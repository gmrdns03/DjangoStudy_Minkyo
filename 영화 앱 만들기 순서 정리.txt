1. 프로젝트 생성
가상환경이 활성화 된 상태(activate 가상환경이름)로 프로젝트를 만들고자 하는 폴더로 간다.
-1 django-admin startproject 프로젝트이름
-2 프로젝트 폴더 안으로 이동
-3. python manage.py migrate

2. 슈퍼유저 만들기
-1 python manage.py createsuperuser
-2 python manage.py runserver  --> 장고 페이지로 서버가 실행되는지 확인하기

3. 만들 앱 생성하기
-1 python manage.py startapp 앱이름
--> 프로젝트 폴더 하위에 앱이름으로 되어있는 앱 폴더가 만들어졌는지 확인

4. 프로젝트 초반 명시 (필수X) 필요 사항
-1 앱 프로젝트 폴더에
	requirement.txt 만들어서 사용할 라이브러리 프로그램 버전 등 정리
-2 프로젝트 메인 폴더에
	.gitignore 파일 만들어서 git에 추가하지 않을 파일들 지정

5. 프로젝트 관리 폴더 셋팅
-1 settings.py
	- installed_apps 밑에 만든 앱프로젝트 이름 추가하기(뒤에 반드시 콤마(,)붙이기)
	- 맨 밑에 LANGUAGE_CODE에 'ko-kr'로 바꾸면 한글지원
	- 이미지를 추가할 예정인 경우 이미지를 저장하고 불러올 경로 지정
		MEDIA_URL = "/media/"
		MEDIA_ROOT = BASE_DIR / "media"

02 urls.py
	- 이미지 관리를 위해
	from django.conf import settings
	from django.conf.urls.static import static
	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

	- 패쓰 설정을 위해
	from django.urls import includ
	urlpatterns = [ ]리스트에 path("앱이름/", include("앱이름.urls")), 추가

6. 앱 프로젝트 폴더 기초 셋팅
-1 urls.py 파일 만들기
	- 관리폴더 urls.py에 "앱이름.urls"를 패쓰 설정했으므로 오류를 방지하기위해
	from django.contrib import admin
	from django.urls import path, include

	urlpatterns = [ ]

-2 forms.py 파일 만들기

-3 templates 폴더와 그 하위에 '앱이름'으로 된 폴더 만들기


7. 앱에 models.py에 모델 생성하기
	-1 models.py 에 테이블 형식 만들기

	-2 admin.py에 만든 모델들 등록하기 
	from movie.models import Actor, Movie, Video, Review  -> 만든 모델 호출하는 코드
	@admin.register(Video)
	class VideoAdmin(admin.ModelAdmin):
	    search_fields = ["movie"]
	    list_display = ["movie", "youtube_url"]
	    list_filter = ["created_at"]
	 
		(위 같은 양식으로 작성)

	-3 cmd 창에서 python manage.py makemigrations 앱이름
	-4 cmd 창에서 python manage.py migrate 앱이름
	-5 앱프로젝트 폴더 하위 migrations폴더에 0001_initial.py 파일이 만들어졌는지 확인

8. DB에 파일들 저장하기
	-1. cmd창에서 manage.py파일이 있는 폴더로 이동
	-2. cmd창에서 python manage.py runserver
	-3. 서버가 열린 아이피 http://127.0.0.1:8000/admin/으로 가면 만든 모델들에 데이터들을 입력할 수 있다.
	-4. 넣고 싶은 데이터들을 입력한다.


================= 메인 -> 영화 리스트 구현하기 ======================

1. views.py  2. urls.py  3. html템플릿 만들기

=========================================================================
1. views.py 셋팅하기
	from movie.models import Actor, Movie, Video, Review
	from django.http import HttpRequest, HttpResponse
	from django.shortcuts import redirect, render

	def index(request: HttpRequest):
    	qs = Movie.objects.all()
    	return render(request, "movie/movie_list.html", {"movie_list": qs,},)

2. urls.py 셋팅하기
	from movie import views
	from django.urls import path

	urlpatterns = [
    		path("", views.index, name="index"),
	]

3. templates/movie폴더 안에 movie_list.html 만들기
	- 웹에 표시할 html코드 작성

4. 오류가 난다면 초반 셋팅에서 
	urls.py 패쓰 추가
 	setting.py의 INSTALLED_APP에 앱이 추가 되었는지
	확인하기

================= 메인 -> 영화이름클릭 -> 영화 디테일 화면 구현하기 ======================
1. views.py  2. urls.py  3. html템플릿 만들기
=========================================================================
1. views.py 셋팅하기
	def movie_detail(request: HttpRequest, pk):
    		movie = Movie.objects.get(pk=pk)
    		review_list = movie.review_set.all()
    		return render(
        		request,
        		"movie/movie_detail.html",
        		{"movie": movie, "review_list": review_list,},
    		)

2. urls.py 셋팅하기
	- urlpatterns에 패쓰추가
	path("<int:pk>/", views.movie_detail, name="movie_detail"),

3. templates/movie폴더 안에 movie_detail.html 만들기 
	- 웹에 표시할 html코드 작성


================= 메인 -> 새로운 영화 등록버튼 구현하기 ======================
1. forms.py    2. views.py   3. urls.py    4. html템플릿 수정
=========================================================================
1. forms.py 셋팅하기
	from django import forms
	from movie.models import Movie

	class MovieForm(forms.ModelForm):
    		class Meta:
        		model = Movie
        		# 유저로부터 입력받을 필드 이름들을 나열
        		fields = ["title", "actor", "director", "poster", "desc"]

	(위 같은 양식으로 movie를 새로 등록할 화면의 폼을 설정한다.)

2. views.py 셋팅하기
	def movie_new(request: HttpRequest):
    	     if request.method == "POST":
        	  	   form = MovieForm(request.POST, request.FILES)
     	   	   if form.is_valid():
        	               movie = form.save(commit=False)
                           movie.save()
                           return redirect(f"/movie/{movie.pk }")

                 else:  # "GED"으로 받는 경우
       		 form = MovieForm()

	    return render(request, "movie/movie_form.html", {"form": form,},)

	( 위 같은 양식으로 views.py 설정하기 )

3. urls.py 셋팅하기
	- 패쓰에 버튼을 누르면 이동할 경로를 추가
	path("new/", views.movie_new, name="movie_new"),

4. templates/movie하위에 movie_form.html 파일을 생성한다.
	<form action="" method="POST" enctype="multipart/form-data">
	    {% csrf_token %}
	    <table>
	        {{ form }}
	    </table>
	    <input type="submit" />
	 </form>

	( 위 같은 양식으로 form이 들어갈 자리와 제출 버튼을 html로 구현해준다. )

================= 메인 -> 영화 디테일 -> 영화 수정 구현하기 ======================
1. forms.py  2. views.py  3. urls.py  4. html탬플릿 수정

(영화 삭제도 같은 방식으로 구현한다.)
===================================================================
1. forms.py 에 셋팅하기
	(영화 새로 등록하기를 이미 구현했다면 구현할 때 쓴 MovieForm을 그대로 사용하면 된다.)

2. views.py 셋팅하기
	- movie_edit 함수 새로 정의해주기

3. urls.py 셋팅하기
	- views.py에서 설정한 경로와 html에서 호출하는 경로를 연결해주는 역할을 한다.

4. movie_detail.htlm 탬플릿에 "영화 수정"링크를 새로 만들어준다.




================= 메인 -> 배우 목록 버튼 구현하기 ======================
1. views.py  2. urls.py  3. html 템플릿 생성 및 수정
=============================================================
1. views.py 셋팅하기
	def actor_index(request: HttpRequest):
    		qs = Actor.objects.all()
    		return render(request, "movie/actor_list.html", {"actor_list": qs,},)

2. urls.py 셋팅하기
	- 패쓰에 경로를 추가
	path("actor/", views.actor_index, name="actor_index"),

3. 메인 화면템플릿(movie_list.html)에 배우 목록 버튼 만들기
	<a href="/movie/actor/">배우 목록</a>
	(href아래 경로는 urls에서 미리 설정한 경로로 맞추기)

4. 배우 목록 버튼을 클릭한 후에 보여줄 탬플릿(actor_list.py) 만들기


=========== 메인 -> 배우 목록 -> 배우이름 버튼 및 디테일 화면 구현하기===========
배우 디테일 화면에서 보여줄 것: 배우사진, 배우이름, 배우필모, 배우수정버튼(나중), 필모수정버튼(나중)

1. views.py  2. urls.py  3. html탬플릿 생성 및 수정
==============================================================
1. views.py 셋팅하기
	def actor_detail(request: HttpRequest, actor_pk):
	    actor = Actor.objects.get(pk=actor_pk)
	    movie_list = actor.movie_set.all()
	    return render(
	        request, "movie/actor_detail.html", {"actor": actor, "movie_list": movie_list,},
	    )
	(위 코드 추가)

2. urls.py 셋팅하기
	- 패쓰에 경로 추가
	path("actor/<int:actor_pk>/", views.actor_detail, name="actor_detail"),

3. actor_list에서 구현된 배우 이름을 클릭하여 배우 디테일로 이동시키기 위해 링크 구현하기
	-1. actor_list의 {{ actor.name }}을 <a href="/movie/actor/{{ actor.pk }}/"></a>태그로 감싼다.

4. 배우 디테일을 구현할 actor_detail.html 탬플릿을 만든다.

=========== 메인 영화목록 -> 영화 디테일 화면에 유튜브 영상 가져오기 ===========
<영화 디테일을 구현 완료 한 상태에서 보기>

1. views.py  2. movie_detail.html
==============================================================

1. 데이터베이스에 url 저장시 설정
	- 유튜브 영상을 가져오려면 url을 저장할 때 부터 url 코드 안에 embed설정을 따로 해야 한다.
	- 예를 들어
		일반 공유 url복사 : https://youtu.be/m9obn-8gHQA
		embed가 들어간 url 복사: https://www.youtube.com/embed/m9obn-8gHQA
	- embed가 들어간 코드를 복사해서 데이터베이스에 저장해줘야 한다.
	- 일반 공유 url을 복사한 후에 중간에 ( .be --> be.com/embed) 수정을 해줘도 된다.
	- 혹은 유튜브 공유하기 --> 퍼가기 버튼을 누르면 embed가 들어간 url을 획득할 수 있다. 

2. 영화 디테일을 구현 완료 했다면 views.py에서 video데이터를 가져오기 위해
	- movie_detail함수 아래 video_list = movie.video_set.all()코드 추가
	- return render() 괄호 안에 "video_list": video_list, 코드 추가

3. movie_detail.html video를 가져오는 for문을 만든다.
	<iframe> 태그 안에 url을 넣는 src="" 큰따옴표 사이에 저장한 youtube_url이 돌도록 해준다.

-예를 들어 다음 코드와 같다.(양식은 유튜브 공유->퍼가기 에서도 확인 가능하다)
<iframe width="560" height="315" src="{{ video.youtube_url }}" title="{{ video.name }}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


=========== 메인 영화목록 -> 영화 디테일 -> 리뷰 쓰기 링크 추가하기 ===========
<이 전에 영화 디테일에서 리뷰까지 구현해 놓았어야 함>

1. forms.py  2. views.py  3. urls.py  4. html탬플릿
=============================================================
1. forms.py에서 클래스 ReviewForm() 설정

2. views.py에서 review_new()함수 정의
	- 함수를 정의할 때 redirect 경로 주의하기
	- 인스턴트로 받은 새로운 리뷰를 저장하는 과정 주의하기

3. urls.py에서 패쓰 추가
	- 예시
	path("<int:movie_pk>/review/new/", views.review_new, name="review_new"),

4. review_form.html 탬플릿 만들기

5. movie_detail.html 탬플릿 안에 리뷰쓰기 버튼 만들기
	- 엥커 태그<a></a>에서 호출할 경로 주의해서 설정하기
	- 예시
	<a href="/movie/{{ movie.pk }}/review/new/">리뷰쓰기</a>








